#!/usr/bin/env bash
set -e -o pipefail

help="
Usage:
  -l                  run tests on local machine
  -p <pattern>        test file pattern, defaults to '$pattern'
  --reporter <name>   test result reporter, no reporter by default
  -s                  Select which device to be installed on if multiple devices presents.

Example:
  $ ./tools/test --reporter tap-nyan --pattern '**/*.test.js'
"

testset='test/testsets.txt'
patternPrefix='/data/workspace/test/'
patterns=""
reporter="cat"
coverage=""
timeout=""
local="NO"
sn=""
while [ $# -gt 0 ]; do
  case "$1" in
    -p|--pattern)
      patterns="$2"
      shift
      ;;
    --testset)
      testset="$2"
      shift
      ;;
    --reporter)
      reporter="./node_modules/.bin/$2"
      shift
      ;;
    -l|--local)
      local="YES"
      ;;
    -s)
      sn="$2"
      shift
      ;;
    -h|--help)
      printf "$help"
      exit
      ;;
    --coverage)
      coverage="--coverage $2"
      shift
      ;;
    --timeout)
      timeout="--timeout $2"
      shift
      ;;
    --*)
      echo "Illegal option $1"
      ;;
  esac
  shift $(( $# > 0 ? 1 : 0 ))
done

if test -z "$patterns"; then
  patterns=$(cat $testset)
fi

pre_scripts=""

if test "$local" = "YES"; then
  export NODE_PATH="$(pwd)/packages"
  export YODA_RUN_MODE=host
  export NODE_ENV=unittest

  patternPrefix="$(pwd)/test/"

  cmd='iotjs ./node_modules/tape/bin/tape.js '
else
  pre_scripts="
export BLUETOOTH_CHANNEL_PREFIX=/tmp;
export NODE_ENV=unittest;
iotjs /usr/lib/node_modules/tape/bin/tape.js
"
  if test "$sn" != ""; then
    cmd="adb -s $sn shell"
  else
    cmd="adb shell"
  fi
fi

if test "$coverage" != ""; then
  rm -f coverage.data
  rm -rf .nyc_output
  mkdir .nyc_output
fi

function run_test(){
  # generate the coverage data for each case and collect them to the ".nyc_output" directory
  name=0
  for pattern in $patterns; do
    if ! test -z "$pattern" && ! [[ "$pattern" =~ "#" ]]; then
      printf ">>> $patternPrefix$pattern\n"
      $cmd $pre_scripts $coverage $timeout "$patternPrefix$pattern" | $reporter

      # collect
      if test "$coverage" != "" && test "$local" = "YES"; then
        if [[ -f "coverage.data" ]]; then
          mv coverage.data .nyc_output/${name}.data
          name=`expr ${name} + 1`
        fi
      fi
    fi
  done
}

run_test
